package org.portfolio.competitormanager.ui;

import org.portfolio.competitormanager.dao.CompetitorDao;
import org.portfolio.competitormanager.dao.QuestionDao;
import org.portfolio.competitormanager.dao.ResultDao;
import org.portfolio.competitormanager.dao.impl.CompetitorDaoImpl;
import org.portfolio.competitormanager.dao.impl.QuestionDaoImpl;
import org.portfolio.competitormanager.dao.impl.ResultDaoImpl;
import org.portfolio.competitormanager.model.Competitor;
import org.portfolio.competitormanager.model.Questions;
import org.portfolio.competitormanager.model.Result;

import javax.swing.*;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class CompetitorLayout extends JFrame {
    // Reference to the form components generated by WindowBuilder
    private JPanel mainPanel;
    private JComboBox<String> difficultyComboBox;
    private JButton startQuizButton;
    private JLabel difficultyLabel;
    private JTextArea questionArea;
    private JRadioButton option1, option2, option3, option4;
    private ButtonGroup optionsGroup;
    private JButton submitButton;
    private JButton leaderboardsButton;
    private JButton homeButton;
    private JLabel scoreLabel;

    private QuestionDao questionDao;
    private ResultDao resultDao;
    private CompetitorDao competitorDao;
    private List<Questions> questions;
    private int currentQuestionIndex = 0;
    private int score = 0;
    private String username;
    private int userId;

    public CompetitorLayout(String username) {
        this.username = username;

        // Initialize DAOs
        questionDao = new QuestionDaoImpl();
        resultDao = new ResultDaoImpl();
        competitorDao = new CompetitorDaoImpl();

        // Retrieve the user_id from the database
        try {
            Competitor competitor = competitorDao.findByUsername(username);
            if (competitor != null) {
                this.userId = competitor.getUserId(); // Store the user_id
            } else {
                JOptionPane.showMessageDialog(this, "User not found!", "Error", JOptionPane.ERROR_MESSAGE);
                dispose();
                return;
            }
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            dispose();
            return;
        }

        initComponents();

        // Populate difficulty levels in the ComboBox
        difficultyComboBox.setModel(new DefaultComboBoxModel<>(new String[]{"Beginner", "Intermediate", "Advanced"}));

        // Ensure that radio buttons are properly grouped
        optionsGroup = new ButtonGroup();
        optionsGroup.add(option1);
        optionsGroup.add(option2);
        optionsGroup.add(option3);
        optionsGroup.add(option4);

        // UI Setup
        JFrame frame = new JFrame("User dashboard - " + username);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 350);
        frame.setLocationRelativeTo(null);

        frame.setContentPane(mainPanel);
        frame.setVisible(true);

        // Action Listeners
        startQuizButton.addActionListener(e -> startQuiz());
        submitButton.addActionListener(e -> submitAnswer());
        leaderboardsButton.addActionListener(e -> showLeaderboards());
        homeButton.addActionListener(e -> {
            // Dispose of the current window
            dispose();
            // Create and show the HomePage UI
            new HomePage(username);
        });


    }

    private void initComponents() {
        // Initialize UI components (if not done by WindowBuilder)
    }

    private void startQuiz() {
        String difficulty = (String) difficultyComboBox.getSelectedItem();
        try {
            List<Questions> allQuestions = questionDao.findByDifficulty(difficulty);

            if (allQuestions.size() < 5) {
                JOptionPane.showMessageDialog(this, "Not enough questions available for the selected difficulty.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Shuffle the questions
            Collections.shuffle(allQuestions);

            // Select only the first 5 questions
            questions = allQuestions.subList(0, 5);

            currentQuestionIndex = 0;
            score = 0;
            displayQuestion();
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void displayQuestion() {
        if (currentQuestionIndex < questions.size()) {
            Questions question = questions.get(currentQuestionIndex);
            questionArea.setText("Question " + (currentQuestionIndex + 1) + ":\n" + question.getQuestionText());

            // Update radio button texts
            option1.setText("1. " + question.getOption1());
            option2.setText("2. " + question.getOption2());
            option3.setText("3. " + question.getOption3());
            option4.setText("4. " + question.getOption4());

            // Clear previous selection
            optionsGroup.clearSelection();
        } else {
            endQuiz();  // End the quiz when all questions have been answered
        }
    }

    private void submitAnswer() {
        int selectedOption = -1; // Default if nothing is selected

        if (option1.isSelected()) selectedOption = 1;
        else if (option2.isSelected()) selectedOption = 2;
        else if (option3.isSelected()) selectedOption = 3;
        else if (option4.isSelected()) selectedOption = 4;

        if (selectedOption == -1) {
            JOptionPane.showMessageDialog(this, "Please select an answer.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Questions question = questions.get(currentQuestionIndex);
        if (selectedOption == question.getCorrectOption()) {
            score++;
        }
        currentQuestionIndex++;
        displayQuestion();
    }


    public double calculateAverageScore(String scores) {
        // Split the scores string by commas
        String[] scoreArray = scores.split(",");
        int totalScores = 0;
        int count = 0;

        // Iterate through the scores and add them up
        for (String score : scoreArray) {
            if (!score.trim().isEmpty()) { // Skip empty scores
                try {
                    totalScores += Integer.parseInt(score.trim()); // Convert score to integer and add to total
                    count++;
                } catch (NumberFormatException e) {
                    // Handle invalid score formats if necessary (e.g., log error)
                    System.err.println("Invalid score found: " + score);  // Log invalid score for debugging
                }
            }
        }

        // Calculate the average score
        double averageScore = (count > 0) ? (double) totalScores / count : 0;

        // Format the average score to 2 decimal places
        DecimalFormat df = new DecimalFormat("#.00");
        return Double.parseDouble(df.format(averageScore));
    }

    private void showLeaderboards() {
        // Fetch leaderboard data and display it
        ResultDao resultDao = new ResultDaoImpl();
        try {
            List<Result> results = resultDao.findAll(); // Get leaderboard data

            // Sort the results in descending order based on average score
            results.sort((r1, r2) -> Double.compare(r2.getAverageScore(), r1.getAverageScore()));

            // Build the leaderboard string
            StringBuilder leaderboard = new StringBuilder("Leaderboard:\n");

            for (Result result : results) {
                leaderboard.append(result.getUsername())
                        .append(" Score: ").append(result.getScore())
                        .append(" Average: ").append(result.getAverageScore())
                        .append("\n");
            }

            // Show the leaderboard
            JOptionPane.showMessageDialog(this, leaderboard.toString(), "Leaderboard", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error loading leaderboard: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void endQuiz() {
        String difficulty = (String) difficultyComboBox.getSelectedItem();
        try {
            // Retrieve the latest result for the user
            List<Result> userResults = resultDao.findByUserId(userId);
            String existingScores = "";

            if (!userResults.isEmpty()) {
                existingScores = userResults.get(0).getScore(); // Get the last recorded scores
            }

            // Always append the new score, even if it's the same as the last score
            String newScores;
            if (!existingScores.isEmpty()) {
                newScores = existingScores + "," + score; // Append the new score
            } else {
                newScores = String.valueOf(score); // First entry, no need for a comma
            }

            // Now remove duplicates (if any)
            String[] scoreArray = newScores.split(",");
            List<String> finalScores = new ArrayList<>();
            for (String s : scoreArray) {
                // Add the score to the list if it's not already in the final list
                if (!finalScores.contains(s)) {
                    finalScores.add(s);
                }
            }

            // Join the scores back to a string (this will only keep unique scores)
            newScores = String.join(",", finalScores);

            // Calculate the new average score
            double averageScore = calculateAverageScore(newScores);

            // Create a new result object
            Result result = new Result(0, userId, username, newScores, averageScore);

            // Debugging: Log the data being sent to the database
            System.out.println("Updating result...");
            System.out.println("UserID: " + userId);
            System.out.println("Scores: " + newScores);
            System.out.println("Average Score: " + averageScore);

            // Save or update the result in the database
            int updateStatus = resultDao.save(result);

            // Check if the update was successful
            if (updateStatus > 0) {
                System.out.println("Record updated successfully.");
            } else {
                System.out.println("Failed to update record.");
            }

            // Show quiz summary
            String summary = "Quiz Summary:\n" +
                    "Username: " + username + "\n" +
                    "Difficulty: " + difficulty + "\n" +
                    "Score: " + score + "/5\n" +
                    "Average Score: " + result.getAverageScore();
            JOptionPane.showMessageDialog(this, summary, "Quiz Completed", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace(); // Print the stack trace for debugging
            JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


}
